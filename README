/h1 Tamu: Text Array Mark Up;

/> This document is written using Tamu;

Tamu (Text Array Mark Up) is a markup language (like "Markdown") using SAN
(Serialized Array Notation). Before we go into the syntax of Tamu, let's look at
SAN syntax.;

SAN has only two data types, string and array. Strings start at the first
non-whitespace character (except for '/' or '{', which we will get to) and
continue until a semicolon. For example:
;/===
  This is a SAN string;
===

Arrays are specified using { ... } and can be nested, like this:
;/===
  { first string in array;
    second string in array;
    { nested array element 1;
      nested array element 2;
    }
  }
===

Whitespace is ignored until it hits the first text or special character,
after which newlines are treated as spaces and special characters use c-like
escapes. Here are the valid escapes in text:
;/===
  \n          newline
  \t          tab
  \;          ';' character. Note: Semicolon normally ends the item.
  \           a literal space character (used as an alternative to '/ ').
  \/          a literal '/' character (see why below).
  \xDD        hex byte of value 0xDD
  \<newline>  line continuation. When \ is used at the end of a line no
              space will be insert when going to the next line.
===

The following are how to use special characters, which are only special
at the start of an item (i.e. after ';'):
;/===
  {           Start of array. End the array with '}'
  //          Line comment. It will not apear in the output SAB.
  /*          Block comment /*nesting allowed*/, it must be closed with: */
  /           '/' followed by one or more spaces is leading whitespace
  \/          Escapes a /, allowing it to be used at the beginning of an item.
              Note this isn't actually special syntax, as '\' is considered a
              normal character and '\/' will always translate to just '/'
  /'''        Is a plain-text/code block. Any number of ' can be used, and
              must be escaped with the same number of ', which ends the item.
              The raw text will ignore escapes (i.e. \n) and preserve newlines,
              _except_ for the first newline if immediately follows the opening
              ' block or the last newline if it immediately preceeds the '
              block.
  /#<number>  Parses the number and writes as big-endian I32. Default base is
              decimal. Prefixes of 0x and 0b will parse hex and binary.
              Prefixing with '-' will make a negative number.
  /$<name>    Run a SAN extension. <name> must be a function which will parse
              it's own syntax.
  /+          Concatenate (join) this string item to the last string item.
              Example:
                this is all one ;/+single string item.;
  /<char>     Other single-character items are implemented by extensions to SAN,
              such as Tamu.
===

The following are Tamu extensions:
;/===
  /*          italicized until *
  /%          bold until %
  /_          underlined until %
  /@          path or universal resource locator (URL). Use like:
                /@{text to display; ./path/to/link}
  /[          inline code until closing ]. Any number of [ can be used:
                /[[this is [ all inline code]]
  />          a "note" block. Use like:
                />  This is a note
                    with multiple lines.;
  /hN         header, use one of {h1 h2 h3 h4}. Ignores leading spaces.
  /l          un-numbered list. Use like:
                /l{ list item; list item; }
  /n          numbered list. Use like:
                /n{ /*1*/ list item; /*2*/ list item; }
  /==         code block. Similar to ' blocks but will be rendered correctly.
===

Most standard text in Tamu is written using normal text strings, with
semicolons breaking up the paragraphs. The document you are reading is an
example of this. All of the above escapes simply cause a list to be written
instead of a string. That list contains specific metadata for renders to
use.;

The commands /* /% /_ /@ and /[...] are treated as "inline" by renderers, so
will not cause a new paragraph (or even surrounding spaces) to be inserted, but
do insert any spaces following them. The other commands are treated as their own
"section" or paragraph.;

For example, you can make;/*italic* ;/% bold% or ;/_underlined_ text pretty
easily. You can also ;/@{insert a link; http://civboot.org} or ;[some code].
All of the above happen inline.;

/h2 SAB: Serialized Array Bytecode

SAN syntax gets compiled into a stream of bytes which are called SAB. There are
two data types in SAN/SAB: string and array. Each of them is preceeded by a
"type byte" which looks like:
;/===
  TJLL LLLL : T=type bit  J=join bit  L=length bits (0-63)
===

;/l{
  T can be 0 for "bytes" or 1 for "array";
  L contains a length (0-63) of the bytes or array;
  J can be 1, which will cause it to be "joined" to the next item. This allows
    data to be longer than 63 bytes or items.
}

Both SAB and SAN are extremely simple. SAN is probably simpler than yaml but is
easier to write and has far less ambiguitity. It also has massively increased
functionality over yaml. SAB on the other hand is about the simplest possible
general purpose structured data that can exist. Having only two types allows it
to be compact, fast and usable for even embedded systems.;



/h1 LICENSING;
This work is part of the Civboot project and therefore primarily exists for
educational purposes. Attribution to the authors and project is appreciated but
not necessary.

Therefore this body of work is licensed using the UNLICENSE, unless otherwise
specified at the beginning of the source file.

If for any reason the UNLICENSE is not valid in your jurisdiction or project,
this work can be singly or dual licensed at your discression with the MIT
license below.

;/###
Copyright 2021 Garrett Berg

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
###
