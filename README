{****************
*}|h1 zoa: serialized structured data and it's textual representation|

|> This document is written using zoat (find out more below!).|

Zoa is a set of standards related to serialized structured data and it's textual
representation and processing. It is part of the [Civboot](http://civboot.org)
project.|

Zoa encompases the following technologies:

|lu{
  |#zoab#: a structured data composed of only arrays and bytes.|
  |#zoat#: an extensible text format for representing zoab in a human readable
    way. Zoat intentionally has little functionality on it's own but allows
    extensibility and a standardized syntax for the different tools built on top
    of it.|
  |#ZoaMark#: a markup language built on zoat, similar in some ways to "Markdown".|
  |#zoac#: a configuration lanugage built on zoat and fngi, allowing execution of
    arbitrary fngi functions with specific requirements.|
  |#zoash#: a text-based shell built on zoac allowing creating of processes,
    mutation of files or anything else a computer user might want to do.
    zoac functions are still callable to process data, but other functions are
    available as well perform side effects.|
}


{**************
*}|h2 zoat

zoat (like zoab) has only two data types: bytes and arrays. Bytes start at the
first non-whitespace character (except for '|' or '{', which we will get to) and
continue until a pipe. For example:
|===
  This is a zoat string. It ends with a pipe|
===

Arrays are specified using curly braces and can be nested, like this:
|===
  { first string in array|
    second string in array|
    { nested array element 1|
      nested array element 2|
    }
  }
===

Whitespace is always ignored until it hits the first text or special
character, after which newlines are treated as spaces and special characters use
c-like escapes. Here are the valid escapes in text:
|===
  \n          newline
  \t          tab
  \|          a literal '|' character
  \{          a literal '{' character
  \}          a literal '}' character
  \           a literal space character (used at beginning of text)
  \xHH        hex byte of value 0xHH
  \<newline>  line continuation. When \ is used at the end of a line no
              space will be insert when going to the next line.
===

For instance,
      there is only one space after the comma above. \
      \ However there are two spaces after the period since
      an escape was used both before and after the newline.|

The following are how to use commands. Commands must be specified immediately
following either a pipe or curly brace:

|===
  |X          Where X is a non-whitespace character. Runs a command, some of
              which are defined below. Note that multiple '|' together are
              ignored, i.e. '|| | | ||' is the same as '|'.

  {           Starts an array. Characters following are always treated as text
              (never a command), but whitespace is still ignored. Example:
                {array item 1| array item 2}

  }           Ends an array. Characters following are always treated as text
              (never a command), but whitespace is still ignored. Example above.

              Note: {{}} will create an empty array inside a array. However,
              adding '|' does nothing. i.e. '|{| {||} |}|' is exactly the same.
              This allows for trailing pipes. If you've ever used JSON you know
              the pain of not being able to use trailing commas, this avoids
              that pain.

  | <bytes>   A set of bytes until the next '|', '{' or '}'. There _must_ be
              whitespace (newline, tab or space) after | otherwise the character
              will be treated as a command. Whitespace will be ignored until the
              first non-whitespace character.

  |\          Starts text immediately using the escape. Example:
                  |\nThis text started on a new line.|

  |*          Line comment. Text is ignored until a newline.

  {*          Block comment {*nesting allowed*}, it must be closed with: *}
              After a closing block comment a new command can start immediately.
              Example:
                  {* comment *}|h1 header

  |'''        Plain-text/code block. Any number of ' can be used, and must be
              escaped with the same number of ', which ends the item (but will
              not execute a command. As a general rule only '|' executes
              commands). The raw text will ignore escapes (i.e. \n) and preserve
              newlines, _except_ for the first newline if it immediately follows
              the opening ' block or the last newline if it immediately preceeds
              the ' block. Also, the text will be de-indented by the indent at
              the start of the command. Example:
                |'''
                This is some raw text.
                It will have no indent.
                I can use { | } \n etc and they are interpreted literally.
                I can even end with a space. '''
                This is a new item, as if the previous had ended with pipe|

  |+          Concatenate (join) this item to the last item of the same type.
              Note that text starts immediately.
              Example:
                all one |+single item. ==> all one single item.|
                {1| 2} |+ {3| 4}       ==> {1| 2| 3| 4}

  |.          Begins the variable compiler, similar to fngi's. When assigning
              variables, values are not added until referenced. Examples:
                |.foo = fngi |              |* set foo equal to "fngi "
                { I think |.foo|is great } |* { I think |fngi |is great }
              Arrays can be accessed by index using @<index>
                |.myArray @0 @3|            |* C equivalent: myArray[0][3]
              If the data is an array of two-length arrays with strings as the
              first item, you can access by key with '.'. Whitespace or special
              characters in the keys are not supported.
                |.myDict.foo.bar|

  |.+         Joins the variable to the last item. Example:
                { I think |.+foo|+is great } |* { I think fngi is great }

  |<char>     Other single-character commands are implemented by extensions,
              such as ZoaMark
===

The following are ZoaMark extensions:
|====
  |/          (inline) italicized until / Example: 'The cheese is |/very/ good.'

  |#          (inline) bold until # Example: 'The cheese is |#very# good.'

  |_          (inline) underlined until _ Example: 'The cheese is |_very_ good.'

  |&          (inline) path or link (URL). Commonly called a "reference" Example:
                  Part of the |&{Civboot| http://civboot.org} project.
              Can also be used as just the link:
                  Part of the |&http://civboot.org| project.

  |[          (inline) code until closing ]. Any number of [ can be used:
                  Some code: |[[this is [ all ] inline code]] wasn't that nice?

  |>          a "note" block. Use like:
                |>  This is a note
                    with no newlines.|
                or
                |>{
                  This is a note,|
                  With one newline.|
                }

  |hN         header block, use one of h1 h2 h3 h4. Ignores leading spaces.

  |lX         list block where X is a character. ln is a numbered list, lu is an
              un-numbered list. Example:
                  |lu{list item| other list item }

  |==         code block. Similar to ' blocks but will be rendered correctly.
              Any number of == can be used. Example:
                  |=== this is a code block that has == inside it. ===
====

Most text in ZoaMark is written using normal text strings, with pipes breaking
up the paragraphs. However, the following commands are treated as "inline" by
renderers:|
|==
Inline commands:
  |/.../      italic
  |#...#      bold
  |_..._      underlined
  |&<link>    reference/link
  |[...]      inline code
==

For example, you can make|/italic/ |#bold# or |_underlined_ text pretty easily.
You can also |&{insert a link| http://civboot.org} or |[some code]. All of these
happen inline.|

{**************
*}|h2 zoab: structured array and byte data.

The binary representation of zoa is called zoab. It is composed of only two
types: bytes an arrays. Both can only have sections of length 63, but a join
bit may be used to make longer values.|

The start of a zoab item has a single byte which specifies it's type, join
status and length. it looks like:|

|===
  JTLL LLLL : J=join bit   T=type bit   L=length bits (0-63)
===

|lu{
  J: can be 1, which will cause it to be "joined" to the next item (which must
    be the same type). This allows the true length to be longer than 63.|
  T: can be 0 for "bytes" or 1 for "array"|
  L: contains a length (0-63) of the bytes or array|
}

Both zoab and zoat are extremely simple. zoat is probably simpler than yaml but is
easier to write and has far less ambiguitity. It also has massively increased
functionality over yaml with features like variable storage and concatenation.
zoab on the other hand is about the simplest possible general purpose structured
data that can exist. Having only two types allows it to be compact, fast and
usable for even embedded systems.|

{**************
*}|h2 Binary Runtime Type Selection

There is one byte that is invalid for both zoab and utf8 (and ascii):
|[J=1 T=0 L=0], which in binary is |[1000 0000] or in hex is 0x80.|

Instead of making this byte illegal, we will _require_ it in the |[zoa(...)]
function, which is intended to deserialize either zoab or zoat from user
inputs, data stored in file systems or data transferred over the wire. If 0x80
is the first character then it is assumed this is zoab data. If 0x80
is |/not/ the first byte then it should be assumed that the file/etc is
human written zoat.|

|> 0x80 will still be illegal for pure-zoab related functions, which expect the
data to already be deserialzed.|

0x80 will signal that the nex byte "steam type". The supported ones are:|
|lu{
  0: pure unstructured data with no special meaning.|
  1: _mostly_ human readable data. i.e. struct fields are names, integers are in
    text format, etc. This is typically what should be passed to dbg logs, human
    readable compressed configs, etc.|
  2: protozoa data, which is similar to protobuf. Fields are represented by
    user-assigned integers, data is in binary format, etc. The deserializer
    obviously needs access to a backwards-compatible reference (i.e. a struct
    definition) to know how to deserialize this data.|
}

We also reserve J=1 T=1 L=0 to mean that the next bytes value is actually a
pointer to more data. This allows fngi (or other languages) to use a maximum
block size of 4kB while still permitting arbitrary length zoab data.|

{**************
*}|h2 LICENSING|
This work is part of the Civboot project and therefore primarily exists for
educational purposes. Attribution to the authors and project is appreciated but
not necessary.|

Therefore this body of work is licensed using the UNLICENSE, unless otherwise
specified at the beginning of the source file.|

If for any reason the UNLICENSE is not valid in your jurisdiction or project,
this work can be singly or dual licensed at your discression with the MIT
license below.|

|###
Copyright 2021 Garrett Berg

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
###
